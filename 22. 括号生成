给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。

例如，给出 n = 3，生成结果为：

[
  "((()))",
  "(()())",
  "(())()",
  "()(())",
  "()()()"
]

思路：
使用递归思路，遍历每一个合法（左右括号数量逐加至各 n 个， 且左括号总是先于右括号添加）的结果，添加进最终输出 list。

据 LeetCode 官方题解：我们的复杂度分析依赖于理解 generateParenthesis(n) 中有多少个元素。
这个分析超出了本文的范畴，时间复杂度 O((4^n)/(n^(1/2)),在回溯过程中，每个有效序列最多需要 n 步。
空间复杂度 O((4^n)/(n^(1/2))，如上所述，并使用 O(n) 的空间来存储序列。 

代码：

class Solution:
    def generateParenthesis(self, n):
        """
        :type n: int
        :rtype: List[str]
        """
        self.list = []
        self._gen(0, 0, n, '')
        return self.list
    
    def _gen(self, left, right, n, result):
        '''构造递归辅助函数'''
        # 递归终止条件
        if len(result) == 2 * n:
            self.list.append(result)
        # 左括号已使用数量小于 n 时，继续递归增加左括号
        if left < n:
            self._gen(left+1, right, n, result + '(')
        # 右括号已使用数量小于左括号时，继续递归增加右括号
        if left > right:
            self._gen(left, right+1, n, result + ')')
