给定一个链表，判断链表中是否有环。

思路一：
使用快慢指针，若有环则会相遇，判定相等即可。

时间复杂度：O(n)， 让我们将 n 设为链表中结点的总数。为了分析时间复杂度，我们分别考虑下面两种情况。

链表中不存在环：
快指针将会首先到达尾部，其时间取决于列表的长度，也就是 O(n)。

链表中存在环：
我们将慢指针的移动过程划分为两个阶段：非环部分与环形部分：

慢指针在走完非环部分阶段后将进入环形部分：此时，快指针已经进入环中 迭代次数=非环部分长度=N

两个指针都在环形区域中：考虑两个在环形赛道上的运动员 - 快跑者每次移动两步而慢跑者每次只移动一步。其速度的差值为1，因此需要经过二者之间距离\速度差值
次循环后，快跑者可以追上慢跑者。这个距离几乎就是环形部分长度 K且速度差值为 1，我们得出这样的结论迭代次数= 近似于迭代次数=近似于环形部分长度K.

因此，在最糟糕的情形下，时间复杂度为 O(N+K)，也就是 O(n)。

空间复杂度：O(1)， 我们只使用了慢指针和快指针两个结点，所以空间复杂度为 O(1)。

代码：
class Solution(object):
    def hasCycle(self, head):
        slow = fast = head
        while slow and fast and fast.next:
            slow = slow.next
            fast = fast.next.next
            if slow is fast:
                return True
        return False

思路二：
可以通过检查一个结点此前是否被访问过来判断链表是否为环形链表。常用的方法是使用哈希表。

我们遍历所有结点并在哈希表中存储每个结点的引用（或内存地址）。如果当前结点为空结点 null（即已检测到链表尾部的下一个结点），那么我们已经遍历完整个链表，并且该链表不是环形链表。如果当前结点的引用已经存在于哈希表中，那么返回 true（即该链表为环形链表）。

时间复杂度：O(n)， 对于含有 n 个元素的链表，我们访问每个元素最多一次。添加一个结点到哈希表中只需要花费 O(1) 的时间。
空间复杂度：O(n)， 空间取决于添加到哈希表中的元素数目，最多可以添加 n 个元素。 

代码：
class Solution(object):
    def hasCycle(self, head):
        hash_map = []
        while head:
            if head in hash_map:
                return True
            else:
                hash_map.append(head)
                head = head.next
        return False
