给定一个二叉树，判断其是否是一个有效的二叉搜索树。

假设一个二叉搜索树具有如下特征：

节点的左子树只包含小于当前节点的数。
节点的右子树只包含大于当前节点的数。
所有左子树和右子树自身必须也是二叉搜索树。
示例 1:

输入:
    2
   / \
  1   3
输出: true
示例 2:

输入:
    5
   / \
  1   4
     / \
    3   6
输出: false
解释: 输入为: [5,1,4,null,null,3,6]。
     根节点的值为 5 ，但是其右子节点值为 4 。
     
思路一：
对给定的 root 进行中序遍历，生成的数组应为从小到大排列。即可判定。对每个结点仅访问一次，因此时间复杂度 O(N)，但是由于存在大量的中间型数组，空间利用率不佳。

代码：
class Solution(object):
    def isValidBST(self, root):
        inorder_root = self.inorder(root)
        return inorder_root == sorted(set(inorder_root))
    
    def inorder(self, root):
        if root is None:
            return []
        return self.inorder(root.left) + [root.val] + self.inorder(root.right)
        
思路二：
设置一个prev指针，按照中序遍历比对当前root的值和prev的大小，若递增，则继续向右，若非递增，则判定不符。时间复杂度 O(N)，但空间复杂度相比方法一有所优化。

代码：
class Solution(object):
    def isValidBST(self, root):
        # 判空
        if root is None:
            return True
            
        # 设置prev指针，起始为None
        self.prev = None
        
        # 返回helper()函数的判断结果
        return self.helper(root)
    
    def helper(self, root):
        # 向左到NIL空指针时，返回True，skip第二个if，进入判定函数
        if root is None:
            return True
        # 如果判定中出现False，则返回False
        if not self.helper(root.left):
            return False
        # 在prev不为None的时候，如果prev不小于根结点，判定不符，返回False
        if self.prev and self.prev.val >= root.val:
            return False
        # 反之则暂时符合，将根结点赋值给prev，并继续向右判定
        self.prev = root
        return self.helper(root.right)
