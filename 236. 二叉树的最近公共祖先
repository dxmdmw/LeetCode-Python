给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。

百度百科中最近公共祖先的定义为：“对于有根树 T 的两个结点 p、q，最近公共祖先表示为一个结点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”

例如，给定如下二叉树:  root = [3,5,1,6,2,0,8,null,null,7,4]

        _______3______
       /              \
    ___5__          ___1__
   /      \        /      \
   6      _2       0       8
         /  \
         7   4
示例 1:

输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
输出: 3
解释: 节点 5 和节点 1 的最近公共祖先是节点 3。
示例 2:

输入: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 4
输出: 5
解释: 节点 5 和节点 4 的最近公共祖先是节点 5。因为根据定义最近公共祖先节点可以为节点本身。
说明:

所有节点的值都是唯一的。
p、q 为不同节点且均存在于给定的二叉树中。

思路一：
采用递归算法，判定给定的 p 和 q 若有一个等于根结点，则根结点即为所求。否则，继续分别判定左、右子树是否包含 p 或 q，若都包含，说明当前根结点即为所求。若有一侧子树 p 或 q 都不包含，则递归查找另一侧子树。直至左右分叉出结果。时间复杂度为 O(N)

代码：
class Solution(object):
    def lowestCommonAncestor(self, root, p, q):
        # 判空，判 p 或 q 为根结点
        if root is None or root == p or root == q:
            return root
        # 在左子树中查找 p 或 q ，如果左子树返回空，对右子树迭代，直至左右子树都不返回空，即 p 和 q 分别在一个左右子树上，即为所求。反之同理
        left = self.lowestCommonAncestor(root.left, p, q)
        right = self.lowestCommonAncestor(root.right, p, q)
        if left is None:
            return right
        if right is None:
            return left
        else:
            return root
